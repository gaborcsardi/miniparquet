[{"path":"https://r-lib.github.io/nanoparquet/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gábor Csárdi. Author, maintainer. Hannes Mühleisen. Author. Google Inc.. Copyright holder. Apache Software Foundation. Copyright holder. Daniel Lemire. Copyright holder. Chad Walters. Copyright holder. . Copyright holder.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Csárdi G, Mühleisen H (2024). nanoparquet: Read Parquet Files. R package version 0.1.2.9000.","code":"@Manual{,   title = {nanoparquet: Read Parquet Files},   author = {Gábor Csárdi and Hannes Mühleisen},   year = {2024},   note = {R package version 0.1.2.9000}, }"},{"path":"https://r-lib.github.io/nanoparquet/dev/index.html","id":"nanoparquet","dir":"","previous_headings":"","what":"Read Parquet Files","title":"Read Parquet Files","text":"nanoparquet reader writer common subset Parquet files. nanoparquet supports rectangular-shaped data structures (nested tables) Snappy compression scheme. nanoparquet (zero, none, 0) external dependencies lightweight. compiles seconds binary size 2 MB.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read Parquet Files","text":"Install R package CRAN:","code":"install.packages(\"nanoparquet\")"},{"path":[]},{"path":"https://r-lib.github.io/nanoparquet/dev/index.html","id":"read","dir":"","previous_headings":"Usage","what":"Read","title":"Read Parquet Files","text":"Call read_parquet() read Parquet file: Folders similar-structured Parquet files (e.g. produced Spark) can read like :","code":"df <- nanoparquet::read_parquet(\"example.parquet\") df <- data.table::rbindlist(lapply(   Sys.glob(\"some-folder/part-*.parquet\"),   nanoparquet::read_parquet ))"},{"path":"https://r-lib.github.io/nanoparquet/dev/index.html","id":"write","dir":"","previous_headings":"Usage","what":"Write","title":"Read Parquet Files","text":"Call write_parquet() write data frame Parquet file:","code":"nanoparquet::write_parquet(mtcars, \"mtcars.parquet\")"},{"path":"https://r-lib.github.io/nanoparquet/dev/index.html","id":"inspect","dir":"","previous_headings":"Usage","what":"Inspect","title":"Read Parquet Files","text":"Call parquet_info(), parquet_columns(), parquet_schema() parquet_metadata() see various kinds metadata Parquet file: parquet_info() shows basic summary file. parquet_columns() shows leaf columns, ones read_parquet() reads R. parquet_schema() shows columns, including non-leaf columns. parquet_metadata() shows complete metadata information: file meta data, schema, row groups column chunks file. find file supported isn’t, please open issue link file.","code":"nanoparquet::parquet_info(\"mtcars.parquet\") nanoparquet::parquet_columns(\"mtcars.parquet\") nanoparquet::parquet_schema(\"mtcars.parquet\") nanoparquet::parquet_metadata(\"mtcars.parquet\")"},{"path":"https://r-lib.github.io/nanoparquet/dev/index.html","id":"options","dir":"","previous_headings":"","what":"Options","title":"Read Parquet Files","text":"nanoparquet.class: extra class add data frames returned read_parquet(). defined, default \"tbl\", changes data frame printed pillar package loaded. nanoparquet.use_arrow_metadata: unless set FALSE, read_parquet() make use Arrow metadata Parquet file. Currently used detect factor columns. nanoparquet.write_arrow_metadata: unless set FALSE, write_parquet() add Arrow metadata Parquet file. helps preserving classes columns, e.g. factors read back factors, nanoparquet Arrow.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Read Parquet Files","text":"MIT","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/nanoparquet-package.html","id":null,"dir":"Reference","previous_headings":"","what":"nanoparquet: Read Parquet Files — nanoparquet-package","title":"nanoparquet: Read Parquet Files — nanoparquet-package","text":"Self-sufficient reader writer flat Parquet files. Nested tables, compression besides Snappy encryption supported.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/nanoparquet-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"nanoparquet: Read Parquet Files — nanoparquet-package","text":"nanoparquet reader writer common subset Parquet files. nanoparquet supports rectangular-shaped data structures (nested tables) Snappy compression scheme. nanoparquet (zero, none, 0) external dependencies lightweight. compiles seconds binary size 2 MB.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/nanoparquet-package.html","id":"installation","dir":"Reference","previous_headings":"","what":"Installation","title":"nanoparquet: Read Parquet Files — nanoparquet-package","text":"Install R package CRAN:","code":"install.packages(\"nanoparquet\")"},{"path":[]},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/nanoparquet-package.html","id":"read","dir":"Reference","previous_headings":"","what":"Read","title":"nanoparquet: Read Parquet Files — nanoparquet-package","text":"Call read_parquet() read Parquet file:   Folders similar-structured Parquet files (e.g. produced Spark) can read like :","code":"df <- nanoparquet::read_parquet(\"example.parquet\") df <- data.table::rbindlist(lapply(   Sys.glob(\"some-folder/part-*.parquet\"),   nanoparquet::read_parquet ))"},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/nanoparquet-package.html","id":"write","dir":"Reference","previous_headings":"","what":"Write","title":"nanoparquet: Read Parquet Files — nanoparquet-package","text":"Call write_parquet() write data frame Parquet file:","code":"nanoparquet::write_parquet(mtcars, \"mtcars.parquet\")"},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/nanoparquet-package.html","id":"inspect","dir":"Reference","previous_headings":"","what":"Inspect","title":"nanoparquet: Read Parquet Files — nanoparquet-package","text":"Call parquet_info(), parquet_columns(), parquet_schema() parquet_metadata() see various kinds metadata Parquet file: parquet_info() shows basic summary file. parquet_columns() shows leaf columns, ones read_parquet() reads R. parquet_schema() shows columns, including non-leaf columns. parquet_metadata() shows complete metadata information: file meta data, schema, row groups column chunks file.   find file supported , please open issue link file.","code":"nanoparquet::parquet_info(\"mtcars.parquet\") nanoparquet::parquet_columns(\"mtcars.parquet\") nanoparquet::parquet_schema(\"mtcars.parquet\") nanoparquet::parquet_metadata(\"mtcars.parquet\")"},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/nanoparquet-package.html","id":"options","dir":"Reference","previous_headings":"","what":"Options","title":"nanoparquet: Read Parquet Files — nanoparquet-package","text":"nanoparquet.class: extra class add data frames returned read_parquet(). defined, default \"tbl\", changes data frame printed pillar package loaded. nanoparquet.use_arrow_metadata: unless set FALSE, read_parquet() make use Arrow metadata Parquet file. Currently used detect factor columns. nanoparquet.write_arrow_metadata: unless set FALSE, write_parquet() add Arrow metadata Parquet file. helps preserving classes columns, e.g. factors read back factors, nanoparquet Arrow.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/nanoparquet-package.html","id":"license","dir":"Reference","previous_headings":"","what":"License","title":"nanoparquet: Read Parquet Files — nanoparquet-package","text":"MIT","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/nanoparquet-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nanoparquet: Read Parquet Files — nanoparquet-package","text":"Maintainer: Gábor Csárdi csardi.gabor@gmail.com Authors: Hannes Mühleisen (ORCID) contributors: Google Inc. [copyright holder] Apache Software Foundation [copyright holder] Daniel Lemire [copyright holder] Chad Walters [copyright holder] Posit Software, PBC [copyright holder]","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/nanoparquet-types.html","id":null,"dir":"Reference","previous_headings":"","what":"nanoparquet's type maps — nanoparquet-types","title":"nanoparquet's type maps — nanoparquet-types","text":"nanoparquet maps R types Parquet types.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/nanoparquet-types.html","id":"r-s-data-types","dir":"Reference","previous_headings":"","what":"R's data types","title":"nanoparquet's type maps — nanoparquet-types","text":"writing data frame, nanoparquet maps R's data types Parquet logical types. mapping performed. rules likely change nanoparquet reaches version 1.0.0. Factors (.e. vectors inherit factor class) converted character vectors using .character(), written STRSXP (character vector) type. fact column factor stored Arrow metadata (see ), unless nanoparquet.write_arrow_metadata option set FALSE. Dates (.e. Date class) written DATE logical type, INT32 type internally. hms objects (hms package) written TIME(true, MILLIS). logical type, internally INT32 Parquet type. Sub-milliseconds precision lost. POSIXct objects written TIMESTAMP(true, MICROS) logical type, internally INT64 Parquet type. Sub-microsecond precision lost. difftime objects (hms objects, see ), written INT64 ParQuet type, noting Arrow metadata (see ) column type Duration NANOSECONDS unit. Integer vectors (INTSXP) written INT(32, true) logical type, corresponds INT32 type. Real vectors (REALSXP) written DOUBLE type. Character vectors (STRSXP) written STRING logical type, BYTE_ARRAY type. always converted UTF-8 writing. Logical vectors (LGLSXP) written BOOLEAN type. vectors error currently.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/nanoparquet-types.html","id":"parquet-s-data-types","dir":"Reference","previous_headings":"","what":"Parquet's data types","title":"nanoparquet's type maps — nanoparquet-types","text":"reading Parquet file nanoparquet also relies logical types Arrow metadata (present, see ) addition low level data types. exact rules . rules likely change nanoparquet reaches version 1.0.0. BOOLEAN type read logical vector (LGLSXP). DATE logical type DATE converted type read Date R object. TIME logical type TIME_MILLIS TIME_MICROS converted types read hms object, see hms package. TIMESTAMP logical type TIMESTAMP_MILLIS TIMESTAMP_MICROS converted types read POSIXct objects. logical type UTC flag set, time zone POSIXct object set UTC. INT32 read integer vector (INTSXP). INT64, DOUBLE FLOAT read real vectors (REALSXP). INT96 read POSIXct read vector tzone attribute set \"UTC\". old convention store time stamps INT96 objects. DECIMAL converted type (FIXED_LEN_BYTE_ARRAY type) read real vector (REALSXP). BYTE_ARRAY read factor object file written Arrow original data type column factor. (See 'Arrow metadata .) Otherwise BYTE_ARRAY read character vector (STRSXP). logical converted types read annotated low level types: ENUM read character vector (STRSXP). UUID fixed length byte array, nanoparquet read currently. INT(8, true), INT(16, true) INT(32, true) read integer vectors INT32 internally Parquet. INT(64, true) read real vector (REALSXP). Unsigned integer types INT(8, false), INT(16, false) INT(32, false) read integer vectors (INTSXP). Large positive values may overflow negative values, known issue fix. INT(64, false) read real vector (REALSXP). Large positive values may overflow negative values, known issue fix. FLOAT16 fixed length byte array, nanoparquet read currently. INTERVAL fixed length byte array, nanoparquet read currently. JSON BSON read character vectors (STRSXP). Nested types (LIST, MAP) UNKNOWN logical types supported currently. can use parquet_columns() function see R read columns Parquet file. Look r_type column.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/nanoparquet-types.html","id":"the-arrow-metadata","dir":"Reference","previous_headings":"","what":"The Arrow metadata","title":"nanoparquet's type maps — nanoparquet-types","text":"Apache Arrow (.e. arrow R package) adds additional metadata Parquet files writing arrow::write_parquet(). , reading file arrow::read_parquet(), uses metadata recreate Arrow R data types writing. nanoparquet::write_parquet() also adds Arrow metadata Parquet files, unless nanoparquet.write_arrow_metadata option set FALSE. Similarly, nanoparquet::read_parquet() uses Arrow metadata Parquet file (present), unless nanoparquet.use_arrow_metadata option set FALSE. Arrow metadata stored file level key-value metadata, key ARROW:schema. Currently nanoparquet uses Arrow metadata two things: uses detect factors. Without Arrow metadata factors read string vectors. uses detect difftime ofjects. Without arrow metadata read INT64 columns, containing time difference nanoseconds.","code":""},{"path":[]},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/parquet_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Parquet file column information — parquet_columns","title":"Parquet file column information — parquet_columns","text":"includes leaf columns, .e. columns read_parquet() read.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/parquet_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parquet file column information — parquet_columns","text":"","code":"parquet_columns(file)"},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/parquet_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parquet file column information — parquet_columns","text":"file Path Parquet file.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/parquet_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parquet file column information — parquet_columns","text":"Data frame columns: file_name: file name. name: column name. type: (low level) Parquet data type. r_type: R type corresponds Parquet type. Might NA read_parquet() read column. See nanoparquet-types type mapping rules. repetition_type: whether column REQUIRED (NA) OPTIONAL (may NA). REPEATED columns currently supported nanoparquet. logical_type: Parquet logical type list column. element least entry called type, potentially additional entries, e.g. bit_width, is_signed, etc.","code":""},{"path":[]},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/parquet_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Short summary of a Parquet file — parquet_info","title":"Short summary of a Parquet file — parquet_info","text":"Short summary Parquet file","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/parquet_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Short summary of a Parquet file — parquet_info","text":"","code":"parquet_info(file)"},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/parquet_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Short summary of a Parquet file — parquet_info","text":"file Path Parquet file.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/parquet_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Short summary of a Parquet file — parquet_info","text":"Data frame columns: file_name: file name. num_cols: number (leaf) columns. num_rows: number rows. num_row_groups: number row groups. file_size: file size bytes. parquet_version: Parquet version. created_by: string scalar, usually name software created file. NA available.","code":""},{"path":[]},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/parquet_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the metadata of a Parquet file — parquet_metadata","title":"Read the metadata of a Parquet file — parquet_metadata","text":"function work files, even read_parquet() unabled read , unsupported schema, encoding, compression reason.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/parquet_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the metadata of a Parquet file — parquet_metadata","text":"","code":"parquet_metadata(file)"},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/parquet_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the metadata of a Parquet file — parquet_metadata","text":"file Path Parquet file.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/parquet_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the metadata of a Parquet file — parquet_metadata","text":"named list entries: file_meta_data: data frame file meta data: file_name: file name. version: Parquet version, integer. num_rows: total number rows. key_value_metadata: list column data frames two character columns called key value. key-value metadata file. Arrow stores schema . created_by: string scalar, usually name software created file. schema: data frame, schema file. one row node (inner node leaf node). flat files means one root node (inner node), always first one, one row \"real\" column. nested schemas, rows depth-first search order. important columns : file_name: file name. name: column name. type: data type. One low level data types. type_length: length fixed length byte arrays. repettion_type: character, one REQUIRED, OPTIONAL REPEATED. logical_type: list column, logical types columns. element least entry called type, potentially additional entries, e.g. bit_width, is_signed, etc. num_children: number child nodes. non-negative integer root node, NA leaf node. $row_groups: data frame, information row groups. $column_chunks: data frame, information column chunks, across row groups. important columns: file_name: file name. row_group: row group chunk belongs . column: leaf column chunks belongs . order $schema, leaf columns (.e. columns NA children) counted. file_path: file chunk stored . NA means file. file_offset: column chunk begins file. type: low level parquet data type. encodings: encodings used store chunk. list column character vectors encoding names. Current possible encodings: \"PLAIN\", \"GROUP_VAR_INT\", \"PLAIN_DICTIONARY\", \"RLE\", \"BIT_PACKED\", \"DELTA_BINARY_PACKED\", \"DELTA_LENGTH_BYTE_ARRAY\", \"DELTA_BYTE_ARRAY\", \"RLE_DICTIONARY\". path_in_scema: list column character vectors. simply path root node. simply column name flat schemas. codec: compression codec used column chunk. Possible values : \"UNCOMPRESSED\", \"SNAPPY\", \"GZIP\", \"LZO\", \"BROTLI\", \"LZ4\", \"ZSTD\". num_values: number values column chunk. total_uncompressed_size: total uncompressed size bytes. total_compressed_size: total compressed size bytes. data_page_offset: absolute position first data page column chunk file. index_page_offset: absolute position first index page column chunk file, NA index pages. dictionary_page_offset: absolute position first dictionary page column chunk file, NA dictionary pages.","code":""},{"path":[]},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/parquet_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read the metadata of a Parquet file — parquet_metadata","text":"","code":"file_name <- system.file(\"extdata/userdata1.parquet\", package = \"nanoparquet\") nanoparquet::parquet_metadata(file_name) #> $file_meta_data #> # A data frame: 1 × 5 #>   file_name                 version num_rows key_value_metadata created_by #>   <chr>                       <int>    <dbl> <I<list>>          <chr>      #> 1 /home/runner/work/_temp/…       1     1000 <tbl [0 × 2]>      parquet-m… #>  #> $schema #> # A data frame: 14 × 11 #>    file_name        name  type  type_length repetition_type converted_type #>    <chr>            <chr> <chr>       <int> <chr>           <chr>          #>  1 /home/runner/wo… hive… NA             NA NA              NA             #>  2 /home/runner/wo… regi… INT96          NA OPTIONAL        NA             #>  3 /home/runner/wo… id    INT32          NA OPTIONAL        NA             #>  4 /home/runner/wo… firs… BYTE…          NA OPTIONAL        UTF8           #>  5 /home/runner/wo… last… BYTE…          NA OPTIONAL        UTF8           #>  6 /home/runner/wo… email BYTE…          NA OPTIONAL        UTF8           #>  7 /home/runner/wo… gend… BYTE…          NA OPTIONAL        UTF8           #>  8 /home/runner/wo… ip_a… BYTE…          NA OPTIONAL        UTF8           #>  9 /home/runner/wo… cc    BYTE…          NA OPTIONAL        UTF8           #> 10 /home/runner/wo… coun… BYTE…          NA OPTIONAL        UTF8           #> 11 /home/runner/wo… birt… BYTE…          NA OPTIONAL        UTF8           #> 12 /home/runner/wo… sala… DOUB…          NA OPTIONAL        NA             #> 13 /home/runner/wo… title BYTE…          NA OPTIONAL        UTF8           #> 14 /home/runner/wo… comm… BYTE…          NA OPTIONAL        UTF8           #> # ℹ 5 more variables: logical_type <I<list>>, num_children <int>, #> #   scale <int>, precision <int>, field_id <int> #>  #> $row_groups #> # A data frame: 1 × 7 #>   file_name                        id total_byte_size num_rows file_offset #>   <chr>                         <int>           <dbl>    <dbl>       <dbl> #> 1 /home/runner/work/_temp/Libr…     0          112492     1000          NA #> # ℹ 2 more variables: total_compressed_size <dbl>, ordinal <int> #>  #> $column_chunks #> # A data frame: 13 × 19 #>    file_name    row_group column file_path file_offset offset_index_offset #>    <chr>            <int>  <int> <chr>           <dbl>               <dbl> #>  1 /home/runne…         0      0 NA                  4                  NA #>  2 /home/runne…         0      1 NA              13274                  NA #>  3 /home/runne…         0      2 NA              17317                  NA #>  4 /home/runne…         0      3 NA              20305                  NA #>  5 /home/runne…         0      4 NA              23855                  NA #>  6 /home/runne…         0      5 NA              48543                  NA #>  7 /home/runne…         0      6 NA              48871                  NA #>  8 /home/runne…         0      7 NA              66223                  NA #>  9 /home/runne…         0      8 NA              81686                  NA #> 10 /home/runne…         0      9 NA              84136                  NA #> 11 /home/runne…         0     10 NA              95403                  NA #> 12 /home/runne…         0     11 NA             103034                  NA #> 13 /home/runne…         0     12 NA             108208                  NA #> # ℹ 13 more variables: offset_index_length <int>, #> #   column_index_offset <dbl>, column_index_length <int>, type <chr>, #> #   encodings <I<list>>, path_in_schema <I<list>>, codec <chr>, #> #   num_values <dbl>, total_uncompressed_size <dbl>, #> #   total_compressed_size <dbl>, data_page_offset <dbl>, #> #   index_page_offset <dbl>, dictionary_page_offset <dbl> #>"},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/parquet_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the schema of a Parquet file — parquet_schema","title":"Read the schema of a Parquet file — parquet_schema","text":"function work files, even read_parquet() unabled read , unsupported schema, encoding, compression reason.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/parquet_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the schema of a Parquet file — parquet_schema","text":"","code":"parquet_schema(file)"},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/parquet_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the schema of a Parquet file — parquet_schema","text":"file Path Parquet file.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/parquet_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the schema of a Parquet file — parquet_schema","text":"","code":"Data frame, the schema of the file. It has one row for each node (inner node or leaf node). For flat files this means one root node (inner node), always the first one, and then one row for each \"real\" column. For nested schemas, the rows are in depth-first search order. Most important columns are: - `file_name`: file name. - `name`: column name. - `type`: data type. One of the low level data types. - `type_length`: length for fixed length byte arrays. - `repettion_type`: character, one of `REQUIRED`, `OPTIONAL` or   `REPEATED`. - `logical_type`: a list column, the logical types of the columns.   An element has at least an entry called `type`, and potentially   additional entries, e.g. `bit_width`, `is_signed`, etc. - `num_children`: number of child nodes. Should be a non-negative   integer for the root node, and `NA` for a leaf node."},{"path":[]},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/read_parquet.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a Parquet file into a data frame — read_parquet","title":"Read a Parquet file into a data frame — read_parquet","text":"Converts contents named Parquet file R data frame.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/read_parquet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a Parquet file into a data frame — read_parquet","text":"","code":"read_parquet(file)"},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/read_parquet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a Parquet file into a data frame — read_parquet","text":"file Path Parquet file.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/read_parquet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a Parquet file into a data frame — read_parquet","text":"data.frame file's contents.","code":""},{"path":[]},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/read_parquet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a Parquet file into a data frame — read_parquet","text":"","code":"file_name <- system.file(\"extdata/userdata1.parquet\", package = \"nanoparquet\") parquet_df <- nanoparquet::read_parquet(file_name) print(str(parquet_df)) #> Classes ‘tbl’ and 'data.frame':\t1000 obs. of  13 variables: #>  $ registration_dttm: POSIXct, format: \"2016-02-03 07:55:29\" \"2016-02-03 17:04:03\" ... #>  $ id               : int  1 2 3 4 5 6 7 8 9 10 ... #>  $ first_name       : chr  \"Amanda\" \"Albert\" \"Evelyn\" \"Denise\" ... #>  $ last_name        : chr  \"Jordan\" \"Freeman\" \"Morgan\" \"Riley\" ... #>  $ email            : chr  \"ajordan0@com.com\" \"afreeman1@is.gd\" \"emorgan2@altervista.org\" \"driley3@gmpg.org\" ... #>  $ gender           : chr  \"Female\" \"Male\" \"Female\" \"Female\" ... #>  $ ip_address       : chr  \"1.197.201.2\" \"218.111.175.34\" \"7.161.136.94\" \"140.35.109.83\" ... #>  $ cc               : chr  \"6759521864920116\" \"\" \"6767119071901597\" \"3576031598965625\" ... #>  $ country          : chr  \"Indonesia\" \"Canada\" \"Russia\" \"China\" ... #>  $ birthdate        : chr  \"3/8/1971\" \"1/16/1968\" \"2/1/1960\" \"4/8/1997\" ... #>  $ salary           : num  49757 150280 144973 90263 NA ... #>  $ title            : chr  \"Internal Auditor\" \"Accountant IV\" \"Structural Engineer\" \"Senior Cost Accountant\" ... #>  $ comments         : chr  \"1E+02\" \"\" \"\" \"\" ... #> NULL"},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/write_parquet.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a data frame to a Parquet file — write_parquet","title":"Write a data frame to a Parquet file — write_parquet","text":"Writes contents R data frame Parquet file.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/write_parquet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a data frame to a Parquet file — write_parquet","text":"","code":"write_parquet(   x,   file,   compression = c(\"snappy\", \"uncompressed\"),   metadata = NULL )"},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/write_parquet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a data frame to a Parquet file — write_parquet","text":"x Data frame write. file Path output file. compression Compression algorithm use. Currently \"snappy\" (default) \"uncompressed\" supported. metadata Additional key-value metadata add file. must named character vector, data frame columns character columns called key value.","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/write_parquet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a data frame to a Parquet file — write_parquet","text":"NULL","code":""},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/write_parquet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write a data frame to a Parquet file — write_parquet","text":"write_parquet() converts string columns UTF-8 encoding calling base::enc2utf8(). factor levels.","code":""},{"path":[]},{"path":"https://r-lib.github.io/nanoparquet/dev/reference/write_parquet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a data frame to a Parquet file — write_parquet","text":"","code":"# add row names as a column, because `write_parquet()` ignores them. mtcars2 <- cbind(name = rownames(mtcars), mtcars) write_parquet(mtcars2, \"mtcars.parquet\") if (!nanoparquet:::is_rcmd_check()) unlink(\"mtcars.parquet\")"}]
